@page "/playwright"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using System.ComponentModel.DataAnnotations;
@inject HttpClient Http

<PageTitle>Test Playwright</PageTitle>

<h1>Playwright Data Grid</h1>

<p>This component demonstrates Playwright testing.</p>

@if (playwrightData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <div>
        <label>Min Range:</label> &nbsp;
        @*@onchange="@(e => IsValidSubmit(e, null))*@
        <input required type="number" id="txtMin" @bind="MinValue" placeholder="Min value" @oninput="ValueEnteredMin" />&nbsp;&nbsp;
        </div>
        <div>
        <label>Max Range:</label> &nbsp;
        <input required type="number" id="txtMax" @bind="MaxValue" placeholder="Max value" @oninput="ValueEnteredMax" /> &nbsp;&nbsp;
        </div>
        <button disabled=@IsTaskRunning class="btn btn-primary" @onclick="GetRandomData" @onclick:preventDefault="true">Retrieve Data</button>
        
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Random Value</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in playwrightData)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.RandomValue</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    public int MinValue { get; set; }
    public int MaxValue { get; set; }
    bool IsTaskRunning = true;
    private PlaywrightData[]? playwrightData;
    private HttpClient client;

    private void ValueEnteredMax(ChangeEventArgs args)
    {
        // check digits
        // check min is lass than max
        // throw exception on boxes

        bool isValidSubmit = ((MinValue > 0 && int.Parse(args.Value.ToString()) > 0)) && (MinValue < int.Parse(args.Value.ToString()));
        IsTaskRunning = !isValidSubmit;
    }

    private void ValueEnteredMin(ChangeEventArgs args)
    {
        bool isValidSubmit = ((MaxValue > 0 && int.Parse(args.Value.ToString()) > 0)) && (MaxValue > int.Parse(args.Value.ToString()));
        IsTaskRunning = !isValidSubmit;

    }

    protected override async Task OnInitializedAsync()
    {
        playwrightData = await Http.GetFromJsonAsync<PlaywrightData[]>("sample-data/weather.json");
        //playwrightData = null;
    }

    //private void IsValidSubmit(ChangeEventArgs minElem, ChangeEventArgs maxElem)
    //{
    //    if (minElem is not null)
    //        minValue = int.Parse(minElem.Value.ToString());
    //    if (maxElem is not null)
    //        maxValue = int.Parse(maxElem.Value.ToString());

    //    IsTaskRunning = (minValue > 0 && maxValue > 0);
    //    StateHasChanged();
    //}

  
    protected async Task GetRandomData() {
       playwrightData = await Http.GetFromJsonAsync<PlaywrightData[]>($"https://localhost:7112/Playwright?startRange={MinValue}&endRange={MaxValue}");

        IsTaskRunning = false; //use this to enable the button after the button click function executed
        

    }

    public class PlaywrightData
    {
        public DateTime Date { get; set; }
        public int RandomValue { get; set; }
        public string? Summary { get; set; }
    }

    
}

