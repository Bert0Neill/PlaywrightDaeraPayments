@page "/playwright"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using System.ComponentModel.DataAnnotations;
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory

<PageTitle>Test Playwright</PageTitle>

<h1>Playwright Data Grid</h1>

<p>This component demonstrates Playwright testing.</p>

<MudGrid Class="justify-space-between" Style="max-width: 800px;">
    <MudItem xs="4">
        <MudTextField Mask="@(new PatternMask("00"))" Label="Min Range" TextChanged="ValueEnteredMin"
                      @bind-Value="minValue" Variant="@Variant.Text" Clearable />
    </MudItem>
    <MudItem xs="4">
        <MudTextField Mask="@(new PatternMask("00"))" Label="Max Range" TextChanged="ValueEnteredMax"
                      @bind-Value="maxValue" Variant="@Variant.Text" Clearable />
    </MudItem>

    <MudItem xs="4">
    <MudButton @onclick="GetRandomData" disabled=@isTaskRunning Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">Retrieve Data</MudButton>
    </MudItem>
</MudGrid>

@*don't display until there is data*@
@if (playwrightData != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Row#</th>
                <th>Date</th>
                <th>Random Value</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in playwrightData)
            {
                <tr>
                    <td>@rowNumber</td>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.RandomValue</td>
                    <td>@forecast.Summary</td>
                </tr>

                rowNumber++; // next row number
            }
        </tbody>
    </table>
}

@code {
    private int rowNumber = 1;
    private int minValue;
    private int maxValue;
    private bool isTaskRunning = false;
    private PlaywrightData[]? playwrightData = null;
    private HttpClient client;

    protected override async Task OnInitializedAsync()
    {
        client = ClientFactory.CreateClient("WebAPI");
    }


    private async Task ValueEnteredMax(string newValue)
    {
        if (String.IsNullOrEmpty(newValue)) return;

        int? tmpValue = int.Parse(newValue);
        bool isValidSubmit = ((minValue > 0 && tmpValue > 0)) && (minValue < tmpValue);
        isTaskRunning = !isValidSubmit;
    }

    private async Task ValueEnteredMin(string newValue)
    {
        if (String.IsNullOrEmpty(newValue)) return;

        int? tmpValue = int.Parse(newValue);
        bool isValidSubmit = ((maxValue > 0 && tmpValue > 0)) && (maxValue > tmpValue);
        isTaskRunning = !isValidSubmit;
    }

    protected async Task GetRandomData()
    {
        playwrightData = await client.GetFromJsonAsync<PlaywrightData[]>($"/Playwright?startRange={minValue}&endRange={maxValue}");
        minValue = maxValue = 0; // reset
        isTaskRunning = true; //disable button
    }

    public class PlaywrightData
    {
        public DateTime Date { get; set; }
        public int RandomValue { get; set; }
        public string? Summary { get; set; }
    }
}

